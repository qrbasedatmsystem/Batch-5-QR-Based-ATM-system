#include "SoftwareSerial.h"
#include<LiquidCrystal.h>
#include <Adafruit_Fingerprint.h>
LiquidCrystal lcd(13, 12, 11, 10, 9, 8);
SoftwareSerial fps_tx_rx(2, 3);
#define python Serial
#define splash splash1
#define enr A4
#define buz 5

#define rel 4

int enr_r,  buzz_out ;



String IncomingData = "";

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&fps_tx_rx);

uint8_t id;

void(* resetFunc) (void) = 0;

void setup() {
  // put your setup code here, to run once:

  LcDSet();
  python.begin(115200);
  finger.begin(57600);
  splash(0, "Initializing");
  splash(1, "Python");

  python.println("Ready");
  delay(1000);
  if (finger.verifyPassword()) {
    Serial.println("Found fingerprint sensor!");
  } else {
    Serial.println("Did not find fingerprint sensor :(");
    while (1) {
      delay(1);
    }
  }
  splash(0, "<<Initializing>>");
  splash(1, "<Finger Print>");

  delay(1000);
  pinMode(enr, INPUT_PULLUP);

  pinMode(buz, OUTPUT);
  pinMode(rel, OUTPUT);

  enr_r = digitalRead(enr);
  if (!enr_r) {

    splash(0, "Enrolling");
    splash(1, "FingerPrint");
    delay(1500);
    Enroll();

  }
  splash(0, "<Finger Print>");
  splash(1, "<<Initialized>>");


}

void LcDSet() {
  lcd.begin(16, 2);

  splash(0, "QR-ATM");
  splash(1, "SysteM");

  delay(2000);
  lcd.clear();
}
void loop() {
  // put your main code here, to run repeatedly:
  getSensor();
  getPython();

}
void getSensor() {

  if (buzz_out == 1) {
    digitalWrite(buz, HIGH);
    delay(1000);
    digitalWrite(buz, LOW);
    delay(250);
  }


}
void getPython() {
  while (python.available())
  {
    IncomingData = python.readString();

    delayMicroseconds(5);
  }
  if (IncomingData.length() > 0) {

    if (IncomingData == "Verify") {
      getFinger();
    }

    IncomingData = "";

  }

}
void getFinger() {

  while (1) {

    int id = getFingerprintIDez();
    Serial.println(id);
    if (id > 0 and id < 100)
    {
      splash(0, "Transaction");
      splash(1, "Successful");
      python.println("<<Transaction Successful>>");
      cash_open(1500);

    }
    else if(id== -1 )
    {
      splash(0, "Please Place");
      splash(1, "Your Finger");
      delay(1000);

    }
    else
    {
      splash(0, "FingerPrint");
      splash(1, "Missmatch");
      delay(1000);
 
    }


    delay(100);
  }
}

void cash_open( int d) {

  digitalWrite(rel, HIGH);
  delay(d);
  digitalWrite(rel, LOW);
  digitalWrite(buz, HIGH);
  delay(50);
  digitalWrite(buz, LOW);
  delay(150);
  digitalWrite(buz, HIGH);
  delay(50);
  digitalWrite(buz, LOW);
  delay(150);
  digitalWrite(buz, HIGH);
  delay(50);
  digitalWrite(buz, LOW);
  delay(150);
  digitalWrite(buz, HIGH);
  delay(50);
  digitalWrite(buz, LOW);
  delay(50);
  splash(0, "Please Take");
  splash(1, "Your Cash");
  delay(1500);
  splash(0, "Thank You");
  splash(1, "For Using");
  delay(1500);
  resetFunc();
}


uint8_t getFingerprintID() {
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK success!

  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }

  // OK converted!
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    Serial.println("Did not find a match");
    return p;
  } else {
    Serial.println("Unknown error");
    return p;
  }

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);

  return finger.fingerID;
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK)  return -1;

  // found a match!
  Serial.print("Found ID #"); Serial.print(finger.fingerID);
  Serial.print(" with confidence of "); Serial.println(finger.confidence);
  int idd = finger.fingerID;
  return idd;
}
